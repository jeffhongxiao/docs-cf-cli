---
title: 开始使用cf CLI
owner: CLI
---

<strong><%= modified_date %></strong>

本节描述如何配置和开始使用 Cloud Foundry 命令行接口 (cf CLI).
本页假定你已经安装了最新版本的 cf CLI.
安装说明见 [安装 cf CLI](./install-go-cli.html).

##<a id='i18n'></a>本地化 ##

cf CLI 会将终端输出翻译成你所选择的语言. 默认语言是 <code>en-US</code>. cf CLI 支持以下语言:

*  中文 (简体): <code>zh-Hans</code>
*  中文 (正体): <code>zh-Hant</code>
*  英语: <code>en-US</code>
*  法语: <code>fr-FR</code>
*  德语: <code>de-DE</code>
*  意大利语: <code>it-IT</code>
*  日语: <code>ja-JP</code>
*  韩语: <code>ko-KR</code>
*  葡萄牙语 (巴西): <code>pt-BR</code>
*  西班牙语: <code>es-ES</code>

使用 [cf config](http://cli.cloudfoundry.org/en-US/cf/config.html) 设置语言.
用 `cf config`设置语言, 使用语法: <code>$ cf config --locale YOUR_LANGUAGE </code>.

例如, 设置语言为 葡萄牙语 并运行 by running `cf help`确认修改:

<pre class="terminal">
$ cf config --locale pt-BR
$ cf help
NOME:
   cf - Uma ferramenta de linha de comando para interagir com Cloud Foundry

USO:
   cf [opções globais] comando [argumentos...] [opções de comando]

VERSÃO:
   6.14.1+dc6adf6-2015-12-22
   ...
</pre>

<p class='note'><strong>Note</strong>: 使用 <code>cf config --locale</code>本地化地信息只影响cf CLI 产生的信息. </p>

## <a id='login'></a>登录 ##

使用 [cf login](http://cli.cloudfoundry.org/en-US/cf/login.html) 登录到 <%= vars.product_short %>.
`cf login` 命令使用下列语法指定 target API endpoint, org (即organization), 以及 space:

<code>$ cf login [-a API_URL] [-u USERNAME] [-p PASSWORD] [-o ORG] [-s SPACE] </code>.

* `API_URL`: 这是你的 API endpoint, <%=vars.api_endpoint%>.
* `USERNAME`: 你的用户名.
* `PASSWORD`: 你的密码. 不鼓励使用`-p`选项, 因为会在shell历史中记录密码.
* `ORG`: 你想要部署的应用的org.
* `SPACE`: 你想要部署的应用所在的org中的space.

cf CLI会提示所需密码, 如果你是多个org或space的成员,`cf login`会提示你要登录到哪个. 否则会自动选择org和space.

<pre class="terminal">
$ cf login -a https://api.example.com -u username<span>@</span>example.com
API endpoint: https://api.example.com

Password>
Authenticating...
OK

Select an org (or press enter to skip):
1. example-org
2. example-other-org

Org> 1
Targeted org example-org

Select a space (or press enter to skip):
1. development
2. staging
3. production

Space> 1
Targeted space development

</pre>
另外, 你可以写脚本登录和设置target,
这要使用非交互的[cf api](http://cli.cloudfoundry.org/en-US/cf/api.html), [cf auth](http://cli.cloudfoundry.org/en-US/cf/auth.html), 以及 [cf target](http://cli.cloudfoundry.org/en-US/cf/target.html)命令.

登录成功后, cf CLI保存`config.json`文件, 该文件包含API endpoint, org, space, 以及access token.
如果你改变了这些设置, `config.json`文件会相应更行.

默认情况, `config.json`位于`~/.cf`目录.
`CF_HOME`环境变量允许你指定`config.json`文件到任意位置.

## <a id='user-roles'></a> Users 和 Roles ##

cf CLI 包含了列出users以及在org和space中assign roles的命令.
参见[Orgs, Spaces, Roles, 和 Permissions](../concepts/roles.html).

### <a id='listing-users'></a>列出 Users的命令 ###

以下命令接受 org 或 space 作为参数:

* [cf org-users](http://cli.cloudfoundry.org/en-US/cf/org-users.html)

* [cf space-users](http://cli.cloudfoundry.org/en-US/cf/space-users.html)

例如, 列出是org的成员的用户

<pre class="terminal">
$ cf org-users example-org
Getting users in org example-org as username<span>@</span>example.com...

ORG MANAGER
  username<span>@</span>example.com

BILLING MANAGER
  huey<span>@</span>example.com
  dewey<span>@</span>example.com

ORG AUDITOR
  louie<span>@</span>example.com
</pre>

### <a id='managing-roles'></a>管理 Roles 的命令###

以下命令需要 <%=vars.product_short%> admin 权限, 并接受username, org 或 space, 以及 role 作为参数:

* [cf set-org-role](http://cli.cloudfoundry.org/en-US/cf/set-org-role.html)

* [cf unset-org-role](http://cli.cloudfoundry.org/en-US/cf/unset-org-role.html)

* [cf set-space-role](http://cli.cloudfoundry.org/en-US/cf/set-space-role.html)

* [cf unset-space-role](http://cli.cloudfoundry.org/en-US/cf/unset-space-role.html)

可用的roles是 "OrgManager", "BillingManager", "OrgAuditor", "SpaceManager", "SpaceDeveloper", 和 "SpaceAuditor".
例如, 给org内的一个user赋予Org Manager的role:

<pre class="terminal">
$ cf set-org-role huey@example.com example-org OrgManager

Assigning role OrgManager to user huey<span>@</span>example.com in org example-org as username<span>@</span>example.com...
OK
</pre>

<p class="note"><strong>Note</strong>:如果你不是<%=vars.product_short%> admin, 当你运行命令时,你会看到这个信息:<code>error code: 10003, message: You are not authorized to perform the requested action</code></p>


## <a id='push'></a>Push ##

[cf push](http://cli.cloudfoundry.org/en-US/cf/push.html)命令push一个新app或者同步改变到已经存在的app

如果你不提供hostname (也叫subdomain), `cf push`会将你的app route到形如`APPNAME.DOMAIN`的URL, 这基于你app的名称和默认的domain
如果你想map不同的route到你的app, 参见[Routes 和 Domains](../devguide/deploy-apps/routes-domains.html)关于创建routes的信息.

`cf push`命令在支持许多参数, 这会决定app的instance如何和在哪里部署.
更多关于`cf push`的细节, 参见Cloud Foundry CLI Reference Guide中的[push](http://cli.cloudfoundry.org/en-US/cf/push.html)页

下列例子push一个名为`my-awesome-app`的app到URL `http://my-awesome-app.example.com`, 并用`-b`指定Ruby buildpack.

<p class="note"><strong>Note</strong>:
  当你push一个app并用<code>-b</code>指定buildpack时, 该app会永久的连接到这个buildpack.
  要在app使用另外一个buildpack, 你必须删除app并重新push.
</p>

<pre class="terminal">
$ cf push my-awesome-app -b ruby_buildpack
Creating app my-awesome-app in org example-org / space development as username@example.com...
OK

Creating route my-awesome-app.example.com...
OK
...

1 of 1 instances running

App started
...

requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: my-awesome-app.example.com
last uploaded: Wed Jun 8 23:43:15 UTC 2016
stack: cflinuxfs2
buildpack: ruby_buildpack

     state     since                    cpu    memory    disk      details
#0   running   2016-06-08 04:44:07 PM   0.0%   0 of 1G   0 of 1G
</pre>

更多关于可用的buidpack的信息, 参见<a href="../buildpacks/">Buildpacks</a>.

## <a id='user-provided'></a> 用户提供的Service Instances ##

为创建或更新用户提供的service instance, 你需要提供基本的参数.
例如数据库service可能需要用户名,密码,host,port,以及数据库名称.

cf CLI有三种方式提供这些参数以创建或更新service的instance:
交互式,非交互式,以及与[RFC 6587](http://tools.ietf.org/html/rfc6587)所描述的第三方log管理软件.
当与第三方logging使用时,cf CLI发送根据[RFC 5424](http://tools.ietf.org/html/rfc5424)格式的数据.

如下描述, 使用`cf cups`创建service instance, 使用`cf uups`更新它.

### <a id='user-cups'></a>cf create-user-provided-service (cups) 命令 ###

使用 [cf create-user-provided-service](http://cli.cloudfoundry.org/en-US/cf/create-user-provided-service.html) (别名 `cf cups`) 创建新的 service instance.

**交互式提供 service instance 参数:**
在`-p`后指定一个逗号分割的参数列表.
这个命令行交互例子创建一个数据库服务的service instance.

  <pre class="terminal">$ cf cups sql-service-instance -p "host, port, dbname, username, password"
host> mysql.example.com
port> 1433
dbname> mysqldb
username> admin
password> Pa55w0rd
Creating user provided service sql-service-instance in org example-org / space development as username@example.com...
OK
</pre>

**交互式提供 service instance 参数:**
在`-p`之后, 将参数及其值以JSON hash传入, 并用单引号.
本例是上面例子的非交互版本:

  <pre class="terminal">$ cf cups sql-service-instance -p '{"host":"mysql.example.com", "port":"1433", "dbname":"mysqldb", "username":"admin","password":"pa55woRD"}'
Creating user provided service sql-service-instance in org example-org / space development as username<span>@</span>example.com...
OK
</pre>

**创建发送数据到第三方的service instance :**
使用 `-l` 选项,后面是外部目的URL.
本例创建了发送日志信息到第三方log管理服务的service instance.
具体的log service说明, 参见 [服务特定的 Streaming Application Logs 使用说明 ](../devguide/services/log-management-thirdparty-svc.html).

  <pre class="terminal">$ cf cups mylog -l syslog://logs4.example.com:25258
Creating user provided service mylog in org example-org / space development as username<span>@</span>example.com...
OK
</pre>

创建用户提供的service instance之后, 使用
[cf bind-service](http://cli.cloudfoundry.org/en-US/cf/bind-service.html)]绑定服务到app,
[cf unbind-service](http://cli.cloudfoundry.org/en-US/cf/unbind-service.html)解除绑定,
[cf rename-service](http://cli.cloudfoundry.org/en-US/cf/rename-service.html)重命名服务
以及[cf delete-service](http://cli.cloudfoundry.org/en-US/cf/delete-service.html)删除服务.

### <a id='user-uups'></a> cf update-user-provided-service (uups) 命令 ###

使用[cf update-user-provided-service](http://cli.cloudfoundry.org/en-US/cf/update-user-provided-service.html) (别名 `cf uups`)
来更新已经存在的用户提供的service instance的一个或多个参数
`cf uups` 命令与[上述](#user-cups)`cf cups`使用相同的语法设置参数值
`cf uups` 命令不会更新任何你不提供的参数值.

## <a id='return-codes'></a> cf CLI 返回值 ##

cf CLI 使用exit codes, 有助于脚本编写, 以及确认命令是否运行成功.
例如, 在运行一个 cf CLI 命令后,
你可以用`echo $?` (Windows上, `echo %ERRORLEVEL%`)获取返回值.
如果返回值是 `0`, 命令成功.

## <a id='help'></a> cf help 命令 ##

[cf help](http://cli.cloudfoundry.org/en-US/cf) 命令列出 cf CLI 命令及每个命令简短的描述.
任何命令使用`-h`列出详细帮助, 包括使用的任何别名.
例如, 查看 `cf delete` 的详细帮助, 运行:

<pre class="terminal">
$ cf delete -h
NAME:
   delete - Delete an app

USAGE:
   cf delete APP_NAME [-f -r]

ALIAS:
   d

OPTIONS:
   -f       Force deletion without confirmation
   -r       Also delete any mapped routes
</pre>
